// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/doctor/doctor.proto

package doctorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DoctorService_GetTodayAppointments_FullMethodName        = "/doctor.DoctorService/GetTodayAppointments"
	DoctorService_GetUpcomingAppointments_FullMethodName     = "/doctor.DoctorService/GetUpcomingAppointments"
	DoctorService_GetPatientAllergiesChronics_FullMethodName = "/doctor.DoctorService/GetPatientAllergiesChronics"
	DoctorService_GetAppointmentByID_FullMethodName          = "/doctor.DoctorService/GetAppointmentByID"
	DoctorService_GetPatientVisits_FullMethodName            = "/doctor.DoctorService/GetPatientVisits"
	DoctorService_AddPatientAllergiesChronics_FullMethodName = "/doctor.DoctorService/AddPatientAllergiesChronics"
	DoctorService_AddPatientVisit_FullMethodName             = "/doctor.DoctorService/AddPatientVisit"
	DoctorService_AddVisitMaterials_FullMethodName           = "/doctor.DoctorService/AddVisitMaterials"
	DoctorService_AddVisitServices_FullMethodName            = "/doctor.DoctorService/AddVisitServices"
	DoctorService_AddPatientDiagnoses_FullMethodName         = "/doctor.DoctorService/AddPatientDiagnoses"
	DoctorService_AddVisitPayment_FullMethodName             = "/doctor.DoctorService/AddVisitPayment"
	DoctorService_UpdateVisitPayment_FullMethodName          = "/doctor.DoctorService/UpdateVisitPayment"
	DoctorService_AddConsultation_FullMethodName             = "/doctor.DoctorService/AddConsultation"
)

// DoctorServiceClient is the client API for DoctorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoctorServiceClient interface {
	GetTodayAppointments(ctx context.Context, in *GetTodayAppointmentsRequest, opts ...grpc.CallOption) (*GetTodayAppointmentsResponse, error)
	GetUpcomingAppointments(ctx context.Context, in *GetUpcomingAppointmentsRequest, opts ...grpc.CallOption) (*GetUpcomingAppointmentsResponse, error)
	GetPatientAllergiesChronics(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetPatientAllergiesChronicsResponse, error)
	GetAppointmentByID(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetAppointmentByIDResponse, error)
	GetPatientVisits(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetPatientVisitsResponse, error)
	AddPatientAllergiesChronics(ctx context.Context, in *AddPatientAllergiesChronicsRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddPatientVisit(ctx context.Context, in *AddPatientVisitRequest, opts ...grpc.CallOption) (*AddVisitResponse, error)
	AddVisitMaterials(ctx context.Context, in *AddVisitMaterialsRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddVisitServices(ctx context.Context, in *AddVisitServicesRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddPatientDiagnoses(ctx context.Context, in *AddPatientDiagnosesRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddVisitPayment(ctx context.Context, in *VisitPaymentRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	UpdateVisitPayment(ctx context.Context, in *VisitPaymentRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddConsultation(ctx context.Context, in *AddConsultationRequest, opts ...grpc.CallOption) (*AddConsultationResponse, error)
}

type doctorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoctorServiceClient(cc grpc.ClientConnInterface) DoctorServiceClient {
	return &doctorServiceClient{cc}
}

func (c *doctorServiceClient) GetTodayAppointments(ctx context.Context, in *GetTodayAppointmentsRequest, opts ...grpc.CallOption) (*GetTodayAppointmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTodayAppointmentsResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetTodayAppointments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetUpcomingAppointments(ctx context.Context, in *GetUpcomingAppointmentsRequest, opts ...grpc.CallOption) (*GetUpcomingAppointmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUpcomingAppointmentsResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetUpcomingAppointments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetPatientAllergiesChronics(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetPatientAllergiesChronicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientAllergiesChronicsResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetPatientAllergiesChronics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetAppointmentByID(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetAppointmentByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppointmentByIDResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetAppointmentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetPatientVisits(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetPatientVisitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientVisitsResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetPatientVisits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) AddPatientAllergiesChronics(ctx context.Context, in *AddPatientAllergiesChronicsRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, DoctorService_AddPatientAllergiesChronics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) AddPatientVisit(ctx context.Context, in *AddPatientVisitRequest, opts ...grpc.CallOption) (*AddVisitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVisitResponse)
	err := c.cc.Invoke(ctx, DoctorService_AddPatientVisit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) AddVisitMaterials(ctx context.Context, in *AddVisitMaterialsRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, DoctorService_AddVisitMaterials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) AddVisitServices(ctx context.Context, in *AddVisitServicesRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, DoctorService_AddVisitServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) AddPatientDiagnoses(ctx context.Context, in *AddPatientDiagnosesRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, DoctorService_AddPatientDiagnoses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) AddVisitPayment(ctx context.Context, in *VisitPaymentRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, DoctorService_AddVisitPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) UpdateVisitPayment(ctx context.Context, in *VisitPaymentRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, DoctorService_UpdateVisitPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) AddConsultation(ctx context.Context, in *AddConsultationRequest, opts ...grpc.CallOption) (*AddConsultationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddConsultationResponse)
	err := c.cc.Invoke(ctx, DoctorService_AddConsultation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorServiceServer is the server API for DoctorService service.
// All implementations must embed UnimplementedDoctorServiceServer
// for forward compatibility.
type DoctorServiceServer interface {
	GetTodayAppointments(context.Context, *GetTodayAppointmentsRequest) (*GetTodayAppointmentsResponse, error)
	GetUpcomingAppointments(context.Context, *GetUpcomingAppointmentsRequest) (*GetUpcomingAppointmentsResponse, error)
	GetPatientAllergiesChronics(context.Context, *GetByIdRequest) (*GetPatientAllergiesChronicsResponse, error)
	GetAppointmentByID(context.Context, *GetByIdRequest) (*GetAppointmentByIDResponse, error)
	GetPatientVisits(context.Context, *GetByIdRequest) (*GetPatientVisitsResponse, error)
	AddPatientAllergiesChronics(context.Context, *AddPatientAllergiesChronicsRequest) (*DefaultResponse, error)
	AddPatientVisit(context.Context, *AddPatientVisitRequest) (*AddVisitResponse, error)
	AddVisitMaterials(context.Context, *AddVisitMaterialsRequest) (*DefaultResponse, error)
	AddVisitServices(context.Context, *AddVisitServicesRequest) (*DefaultResponse, error)
	AddPatientDiagnoses(context.Context, *AddPatientDiagnosesRequest) (*DefaultResponse, error)
	AddVisitPayment(context.Context, *VisitPaymentRequest) (*DefaultResponse, error)
	UpdateVisitPayment(context.Context, *VisitPaymentRequest) (*DefaultResponse, error)
	AddConsultation(context.Context, *AddConsultationRequest) (*AddConsultationResponse, error)
	mustEmbedUnimplementedDoctorServiceServer()
}

// UnimplementedDoctorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDoctorServiceServer struct{}

func (UnimplementedDoctorServiceServer) GetTodayAppointments(context.Context, *GetTodayAppointmentsRequest) (*GetTodayAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodayAppointments not implemented")
}
func (UnimplementedDoctorServiceServer) GetUpcomingAppointments(context.Context, *GetUpcomingAppointmentsRequest) (*GetUpcomingAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingAppointments not implemented")
}
func (UnimplementedDoctorServiceServer) GetPatientAllergiesChronics(context.Context, *GetByIdRequest) (*GetPatientAllergiesChronicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientAllergiesChronics not implemented")
}
func (UnimplementedDoctorServiceServer) GetAppointmentByID(context.Context, *GetByIdRequest) (*GetAppointmentByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentByID not implemented")
}
func (UnimplementedDoctorServiceServer) GetPatientVisits(context.Context, *GetByIdRequest) (*GetPatientVisitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientVisits not implemented")
}
func (UnimplementedDoctorServiceServer) AddPatientAllergiesChronics(context.Context, *AddPatientAllergiesChronicsRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPatientAllergiesChronics not implemented")
}
func (UnimplementedDoctorServiceServer) AddPatientVisit(context.Context, *AddPatientVisitRequest) (*AddVisitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPatientVisit not implemented")
}
func (UnimplementedDoctorServiceServer) AddVisitMaterials(context.Context, *AddVisitMaterialsRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVisitMaterials not implemented")
}
func (UnimplementedDoctorServiceServer) AddVisitServices(context.Context, *AddVisitServicesRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVisitServices not implemented")
}
func (UnimplementedDoctorServiceServer) AddPatientDiagnoses(context.Context, *AddPatientDiagnosesRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPatientDiagnoses not implemented")
}
func (UnimplementedDoctorServiceServer) AddVisitPayment(context.Context, *VisitPaymentRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVisitPayment not implemented")
}
func (UnimplementedDoctorServiceServer) UpdateVisitPayment(context.Context, *VisitPaymentRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVisitPayment not implemented")
}
func (UnimplementedDoctorServiceServer) AddConsultation(context.Context, *AddConsultationRequest) (*AddConsultationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConsultation not implemented")
}
func (UnimplementedDoctorServiceServer) mustEmbedUnimplementedDoctorServiceServer() {}
func (UnimplementedDoctorServiceServer) testEmbeddedByValue()                       {}

// UnsafeDoctorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoctorServiceServer will
// result in compilation errors.
type UnsafeDoctorServiceServer interface {
	mustEmbedUnimplementedDoctorServiceServer()
}

func RegisterDoctorServiceServer(s grpc.ServiceRegistrar, srv DoctorServiceServer) {
	// If the following call pancis, it indicates UnimplementedDoctorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DoctorService_ServiceDesc, srv)
}

func _DoctorService_GetTodayAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodayAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetTodayAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetTodayAppointments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetTodayAppointments(ctx, req.(*GetTodayAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetUpcomingAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpcomingAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetUpcomingAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetUpcomingAppointments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetUpcomingAppointments(ctx, req.(*GetUpcomingAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetPatientAllergiesChronics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetPatientAllergiesChronics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetPatientAllergiesChronics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetPatientAllergiesChronics(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetAppointmentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetAppointmentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetAppointmentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetAppointmentByID(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetPatientVisits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetPatientVisits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetPatientVisits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetPatientVisits(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_AddPatientAllergiesChronics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPatientAllergiesChronicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).AddPatientAllergiesChronics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_AddPatientAllergiesChronics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).AddPatientAllergiesChronics(ctx, req.(*AddPatientAllergiesChronicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_AddPatientVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPatientVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).AddPatientVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_AddPatientVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).AddPatientVisit(ctx, req.(*AddPatientVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_AddVisitMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVisitMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).AddVisitMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_AddVisitMaterials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).AddVisitMaterials(ctx, req.(*AddVisitMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_AddVisitServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVisitServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).AddVisitServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_AddVisitServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).AddVisitServices(ctx, req.(*AddVisitServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_AddPatientDiagnoses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPatientDiagnosesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).AddPatientDiagnoses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_AddPatientDiagnoses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).AddPatientDiagnoses(ctx, req.(*AddPatientDiagnosesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_AddVisitPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).AddVisitPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_AddVisitPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).AddVisitPayment(ctx, req.(*VisitPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_UpdateVisitPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).UpdateVisitPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_UpdateVisitPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).UpdateVisitPayment(ctx, req.(*VisitPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_AddConsultation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConsultationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).AddConsultation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_AddConsultation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).AddConsultation(ctx, req.(*AddConsultationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoctorService_ServiceDesc is the grpc.ServiceDesc for DoctorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoctorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doctor.DoctorService",
	HandlerType: (*DoctorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTodayAppointments",
			Handler:    _DoctorService_GetTodayAppointments_Handler,
		},
		{
			MethodName: "GetUpcomingAppointments",
			Handler:    _DoctorService_GetUpcomingAppointments_Handler,
		},
		{
			MethodName: "GetPatientAllergiesChronics",
			Handler:    _DoctorService_GetPatientAllergiesChronics_Handler,
		},
		{
			MethodName: "GetAppointmentByID",
			Handler:    _DoctorService_GetAppointmentByID_Handler,
		},
		{
			MethodName: "GetPatientVisits",
			Handler:    _DoctorService_GetPatientVisits_Handler,
		},
		{
			MethodName: "AddPatientAllergiesChronics",
			Handler:    _DoctorService_AddPatientAllergiesChronics_Handler,
		},
		{
			MethodName: "AddPatientVisit",
			Handler:    _DoctorService_AddPatientVisit_Handler,
		},
		{
			MethodName: "AddVisitMaterials",
			Handler:    _DoctorService_AddVisitMaterials_Handler,
		},
		{
			MethodName: "AddVisitServices",
			Handler:    _DoctorService_AddVisitServices_Handler,
		},
		{
			MethodName: "AddPatientDiagnoses",
			Handler:    _DoctorService_AddPatientDiagnoses_Handler,
		},
		{
			MethodName: "AddVisitPayment",
			Handler:    _DoctorService_AddVisitPayment_Handler,
		},
		{
			MethodName: "UpdateVisitPayment",
			Handler:    _DoctorService_UpdateVisitPayment_Handler,
		},
		{
			MethodName: "AddConsultation",
			Handler:    _DoctorService_AddConsultation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/doctor/doctor.proto",
}
