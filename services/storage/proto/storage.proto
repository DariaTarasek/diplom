syntax = "proto3";

package storage;

import "google/protobuf/timestamp.proto";

option go_package = "storage/proto;storagepb";

message AddUserRequest {
  string login = 1;
  string password = 2;
}

message AddUserResponse {
  int32 user_id = 1;
  string error = 2;
}

message AddDoctorRequest {
  int32 user_id = 1;
  string first_name = 2;
  string second_name = 3;
  string surname = 4;
  string phone_number = 5;
  string email = 6;
  string education = 7;
  int32 experience = 8;
  string gender = 9;
}

message AddDoctorResponse {
  string error = 1;
}

message AddAdminRequest {
  int32 user_id = 1;
  string first_name = 2;
  string second_name = 3;
  string surname = 4;
  string phone_number = 5;
  string email = 6;
  string gender = 7;
}

message AddAdminResponse {
  string error = 1;
}

message AddPatientRequest {
  int32 user_id = 1;
  string first_name = 2;
  string second_name = 3;
  string surname = 4;
  string email = 5;
  google.protobuf.Timestamp birth_date = 6;
  string phone_number = 7;
  string gender = 8;
}

message AddPatientResponse {
  string error = 1;
}

message EmptyRequest{}

message Specialization {
  int32 id = 1;
  string name = 2;
}

message GetAllSpecsResponse{
  repeated Specialization specs = 1;
}

message AddUserRoleRequest{
  int32 user_id = 1;
  int32 role_id = 2;
}

message AddUserRoleResponse{
  string error = 1;
}

message WeeklyDoctorSchedule {
  int32 id = 1;
  int32 doctor_id = 2;
  int32 weekday = 3;
  google.protobuf.Timestamp start_time = 4;
  google.protobuf.Timestamp end_time = 5;
  int32 slot_duration_minutes = 6;
  bool is_day_off = 7;
}

message GetScheduleByDoctorIdRequest {
  int32 doctor_id = 1;
}

message GetScheduleByDoctorIdResponse {
  repeated WeeklyDoctorSchedule doctor_schedule = 1;
}

message GetUserByLoginRequest{
  string login = 1;
}

message GetUserByLoginResponse{
  string login = 1;
  string password = 2;
  int32 id = 3;
}

message UpdateUserPasswordRequest{
  int32 id = 1;
  string login = 2;
  string password = 3;
}

message DefaultResponse {
  string error = 1;
}

message Doctor {
  int32 user_id = 1;
  string first_name = 2;
  string second_name = 3;
  string surname = 4;
  string phone_number = 5;
  string email = 6;
  string education = 7;
  int32 experience = 8;
  string gender = 9;
}

message GetDoctorsResponse {
  repeated Doctor doctors = 1;
}

message WeeklyClinicSchedule {
  int32 id = 1;
  int32 weekday = 2;
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  int32 slot_duration_minutes = 5;
  bool is_day_off = 6;
}

message GetClinicWeeklyScheduleResponse {
  repeated WeeklyClinicSchedule clinic_schedule = 1;
}

message GetUserRoleRequest{
  int32 user_id = 1;
}

message GetUserRoleResponse{
  int32 role = 1;
}

message UpdateClinicWeeklyScheduleRequest {
  repeated WeeklyClinicSchedule clinic_schedule = 1;
}

message AddDoctorWeeklyScheduleRequest {
  repeated WeeklyDoctorSchedule doctor_schedule = 1;
}

message UpdateDoctorWeeklyScheduleRequest {
  repeated WeeklyDoctorSchedule doctor_schedule = 1;
}
message GetRolePermissionRequest {
  int32 role_id = 1;
  int32 perm_id = 2;
}

message AddClinicDailyOverrideRequest {
  google.protobuf.Timestamp date = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  int32 slot_duration_minutes = 4;
  bool is_day_off = 5;
}

message AddDoctorDailyOverrideRequest {
  int32 doctor_id = 1;
  google.protobuf.Timestamp date = 2;
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  int32 slot_duration_minutes = 5;
  bool is_day_off = 6;
}

message GetDoctorBySpecIDRequest {
  int32 spec_id = 1;
}

message GetAppointmentsByDoctorIDRequest {
  int32 doctor_id = 1;
}

message Appointment {
  int32 id = 1;
  int32 doctor_id = 2;
  google.protobuf.Timestamp date = 3;
  google.protobuf.Timestamp time = 4;
  int32 patient_id = 5;
  string second_name = 6;
  string first_name = 7;
  string surname = 8;
  google.protobuf.Timestamp birth_date = 9;
  string gender = 10;
  string phone_number = 11;
  string status = 12;
  google.protobuf.Timestamp created_at = 13;
  google.protobuf.Timestamp updated_at = 14;
}

message GetAppointmentsByDoctorIDResponse {
  repeated Appointment appointments = 1;
}

message GetByIDRequest {
  int32 id = 1;
}

message Patient {
  int32 user_id = 1;
  string first_name = 2;
  string second_name = 3;
  string surname = 4;
  string email = 5;
  google.protobuf.Timestamp birth_date = 6;
  string phone_number = 7;
  string gender = 8;
}

message GetPatientByIDResponse {
  Patient patient = 1;
}

message AddAppointmentRequest {
  Appointment appointment = 1;
}

message UpdateAppointmentRequest {
  Appointment appointment = 1;
}

message GetAppointmentsByUserIDResponse {
  repeated Appointment appointment = 1;
}

message GetAppointmentByIDResponse {
  Appointment appointment = 1;
}

message GetDoctorByIDResponse {
  Doctor doctor = 1;
}

message GetSpecsByDoctorIDResponse {
  repeated int32 spec_id = 1;
}
message GetClinicOverrideRequest {
  google.protobuf.Timestamp date = 1;
}

message GetClinicOverrideResponse {
  google.protobuf.Timestamp date = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  bool is_day_off = 4;
}

message GetDoctorOverrideRequest {
  int32 doctor_id = 1;
  google.protobuf.Timestamp date = 2;
}

message GetDoctorOverrideResponse {
  int32 doctor_id = 1;
  google.protobuf.Timestamp date = 2;
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  bool is_day_off = 5;
}


message AddMaterialRequest {
  string name = 1;
  int32 price = 2;
}

message AddServiceRequest {
  string name = 1;
  int32 price = 2;
  int32 type = 3;
}

message UpdateMaterialRequest {
  int32 id = 1;
  string name = 2;
  int32 price = 3;
}

message UpdateServiceRequest {
  int32 id = 1;
  string name = 2;
  int32 price = 3;
  int32 type = 4;
}

message Material {
  int32 id = 1;
  string name = 2;
  int32 price = 3;
}

message Service {
  int32 id = 1;
  string name = 2;
  int32 price = 3;
  int32 type = 4;
}

message GetMaterialsResponse {
  repeated Material materials = 1;
}

message GetServicesResponse {
  repeated Service services = 1;
}

message GetByNameRequest {
  string name = 1;
}

message GetMaterialByNameResponse {
  int32 id = 1;
  string name = 2;
  int32 price = 3;
}


message GetServiceByNameResponse {
  int32 id = 1;
  string name = 2;
  int32 price = 3;
  int32 type = 4;
}


message DeleteRequest {
  int32 id = 1;
}


message ServiceType {
  int32 id = 1;
  string name = 2;
}

message GetServicesTypesResponse {
  repeated ServiceType types = 1;
}

message GetServiceTypeByIdRequest {
  int32 id = 1;
}

message GetServiceTypeByIdResponse {
  int32 id = 1;
  string name = 2;
}

service StorageService {
  rpc AddUser(AddUserRequest) returns (AddUserResponse); // добавление пользователя
  rpc AddDoctor(AddDoctorRequest) returns (AddDoctorResponse); // добавление врача
  rpc GetAllSpecs(EmptyRequest) returns (GetAllSpecsResponse); // получение всех специализаций врачей
  rpc AddUserRole(AddUserRoleRequest) returns (AddUserRoleResponse); // добавление роли пользователю
  rpc AddAdmin(AddAdminRequest) returns (AddAdminResponse); // добавление администратора
  rpc AddPatient(AddPatientRequest) returns (AddPatientResponse); // добавление пациента
  rpc GetUserByLogin(GetUserByLoginRequest) returns (GetUserByLoginResponse); // получение пользователя по логину
  rpc UpdateUserPassword(UpdateUserPasswordRequest) returns (DefaultResponse); // обновление пароля пользователя
  rpc GetDoctors(EmptyRequest) returns (GetDoctorsResponse); // получение списка всех врачей
  rpc GetClinicWeeklySchedule(EmptyRequest) returns (GetClinicWeeklyScheduleResponse); // получение постоянного расписания клиники
  rpc GetUserRole(GetUserRoleRequest) returns (GetUserRoleResponse); // получение роли пользователя
  rpc GetDoctorWeeklySchedule(GetScheduleByDoctorIdRequest) returns (GetScheduleByDoctorIdResponse); // получение постоянного расписания врача
  rpc UpdateClinicWeeklySchedule(UpdateClinicWeeklyScheduleRequest) returns (DefaultResponse); // обновление постояенного расписания клиники
  rpc AddDoctorWeeklySchedule(AddDoctorWeeklyScheduleRequest) returns (DefaultResponse); // добавление постоянного расписания врача
  rpc UpdateDoctorWeeklySchedule(UpdateDoctorWeeklyScheduleRequest) returns (DefaultResponse); // обновление постоянного расписания врача
  rpc GetRolePermission(GetRolePermissionRequest) returns (DefaultResponse);
  rpc GetDoctorsBySpecID(GetDoctorBySpecIDRequest) returns (GetDoctorsResponse);
  rpc GetAppointmentsByDoctorID(GetAppointmentsByDoctorIDRequest) returns (GetAppointmentsByDoctorIDResponse);
  rpc GetPatientByID(GetByIDRequest) returns (GetPatientByIDResponse);
  rpc AddAppointment(AddAppointmentRequest) returns (DefaultResponse);
  rpc GetAppointmentsByUserID(GetByIDRequest) returns (GetAppointmentsByUserIDResponse);
  rpc GetSpecsByDoctorID(GetByIDRequest) returns (GetSpecsByDoctorIDResponse);
  rpc GetDoctorByID(GetByIDRequest) returns (GetDoctorByIDResponse);
  rpc UpdateAppointment(UpdateAppointmentRequest) returns (DefaultResponse);
  rpc GetAppointmentByID(GetByIDRequest) returns (GetAppointmentByIDResponse);
  rpc AddClinicDailyOverride(AddClinicDailyOverrideRequest) returns (DefaultResponse); // добавление переопределения дня клиники
  rpc AddDoctorDailyOverride(AddDoctorDailyOverrideRequest) returns (DefaultResponse); // добавление переопределения дня врача
  rpc GetClinicOverride(GetClinicOverrideRequest) returns (GetClinicOverrideResponse); // получение переопределения дня клиники
  rpc GetDoctorOverride(GetDoctorOverrideRequest) returns (GetDoctorOverrideResponse); // получение переопределения дня врача

  // управление услугами и материалами
  rpc AddMaterial(AddMaterialRequest) returns (DefaultResponse);
  rpc AddService(AddServiceRequest) returns (DefaultResponse);

  rpc UpdateMaterial(UpdateMaterialRequest) returns (DefaultResponse);
  rpc UpdateService(UpdateServiceRequest) returns (DefaultResponse);

  rpc GetMaterials(EmptyRequest) returns (GetMaterialsResponse);
  rpc GetServices(EmptyRequest) returns (GetServicesResponse);
  rpc GetServicesTypes(EmptyRequest) returns (GetServicesTypesResponse);
  // rpc GetMaterialByName(GetByNameRequest) returns (GetMaterialByNameResponse);
  // rpc GetServiceByName(GetByNameRequest) returns (GetServiceByNameResponse);
  rpc GetServiceTypeById(GetServiceTypeByIdRequest) returns (GetServiceTypeByIdResponse);

  rpc DeleteMaterial(DeleteRequest) returns (DefaultResponse);
  rpc DeleteService(DeleteRequest) returns (DefaultResponse);
}