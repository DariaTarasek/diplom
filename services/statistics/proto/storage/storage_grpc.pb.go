// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/storage/storage.proto

package storagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StorageService_GetTotalPatients_FullMethodName        = "/storage.StorageService/GetTotalPatients"
	StorageService_GetTotalVisits_FullMethodName          = "/storage.StorageService/GetTotalVisits"
	StorageService_GetTopServices_FullMethodName          = "/storage.StorageService/GetTopServices"
	StorageService_GetDoctorAvgVisit_FullMethodName       = "/storage.StorageService/GetDoctorAvgVisit"
	StorageService_GetDoctorAvgCheck_FullMethodName       = "/storage.StorageService/GetDoctorAvgCheck"
	StorageService_GetDoctorUniquePatient_FullMethodName  = "/storage.StorageService/GetDoctorUniquePatient"
	StorageService_GetAgeGroupStat_FullMethodName         = "/storage.StorageService/GetAgeGroupStat"
	StorageService_GetNewPatientsThisMonth_FullMethodName = "/storage.StorageService/GetNewPatientsThisMonth"
	StorageService_GetAvgVisitsPerPatient_FullMethodName  = "/storage.StorageService/GetAvgVisitsPerPatient"
	StorageService_GetTotalIncome_FullMethodName          = "/storage.StorageService/GetTotalIncome"
	StorageService_GetMonthlyIncome_FullMethodName        = "/storage.StorageService/GetMonthlyIncome"
	StorageService_GetClinicAverageCheck_FullMethodName   = "/storage.StorageService/GetClinicAverageCheck"
	StorageService_GetDoctorByID_FullMethodName           = "/storage.StorageService/GetDoctorByID"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	// статистика
	GetTotalPatients(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IntResponse, error)
	GetTotalVisits(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IntResponse, error)
	GetTopServices(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ServiceStatsResponse, error)
	GetDoctorAvgVisit(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DoctorAvgVisitResponse, error)
	GetDoctorAvgCheck(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DoctorAvgCheckResponse, error)
	GetDoctorUniquePatient(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DoctorUniquePatientResponse, error)
	GetAgeGroupStat(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AgeGroupStatResponse, error)
	GetNewPatientsThisMonth(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IntResponse, error)
	GetAvgVisitsPerPatient(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FloatResponse, error)
	GetTotalIncome(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FloatResponse, error)
	GetMonthlyIncome(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FloatResponse, error)
	GetClinicAverageCheck(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FloatResponse, error)
	GetDoctorByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetDoctorResponse, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) GetTotalPatients(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, StorageService_GetTotalPatients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetTotalVisits(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, StorageService_GetTotalVisits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetTopServices(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ServiceStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceStatsResponse)
	err := c.cc.Invoke(ctx, StorageService_GetTopServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetDoctorAvgVisit(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DoctorAvgVisitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DoctorAvgVisitResponse)
	err := c.cc.Invoke(ctx, StorageService_GetDoctorAvgVisit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetDoctorAvgCheck(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DoctorAvgCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DoctorAvgCheckResponse)
	err := c.cc.Invoke(ctx, StorageService_GetDoctorAvgCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetDoctorUniquePatient(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DoctorUniquePatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DoctorUniquePatientResponse)
	err := c.cc.Invoke(ctx, StorageService_GetDoctorUniquePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetAgeGroupStat(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AgeGroupStatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgeGroupStatResponse)
	err := c.cc.Invoke(ctx, StorageService_GetAgeGroupStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetNewPatientsThisMonth(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, StorageService_GetNewPatientsThisMonth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetAvgVisitsPerPatient(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FloatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FloatResponse)
	err := c.cc.Invoke(ctx, StorageService_GetAvgVisitsPerPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetTotalIncome(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FloatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FloatResponse)
	err := c.cc.Invoke(ctx, StorageService_GetTotalIncome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetMonthlyIncome(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FloatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FloatResponse)
	err := c.cc.Invoke(ctx, StorageService_GetMonthlyIncome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetClinicAverageCheck(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FloatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FloatResponse)
	err := c.cc.Invoke(ctx, StorageService_GetClinicAverageCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetDoctorByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetDoctorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoctorResponse)
	err := c.cc.Invoke(ctx, StorageService_GetDoctorByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility.
type StorageServiceServer interface {
	// статистика
	GetTotalPatients(context.Context, *EmptyRequest) (*IntResponse, error)
	GetTotalVisits(context.Context, *EmptyRequest) (*IntResponse, error)
	GetTopServices(context.Context, *EmptyRequest) (*ServiceStatsResponse, error)
	GetDoctorAvgVisit(context.Context, *EmptyRequest) (*DoctorAvgVisitResponse, error)
	GetDoctorAvgCheck(context.Context, *EmptyRequest) (*DoctorAvgCheckResponse, error)
	GetDoctorUniquePatient(context.Context, *EmptyRequest) (*DoctorUniquePatientResponse, error)
	GetAgeGroupStat(context.Context, *EmptyRequest) (*AgeGroupStatResponse, error)
	GetNewPatientsThisMonth(context.Context, *EmptyRequest) (*IntResponse, error)
	GetAvgVisitsPerPatient(context.Context, *EmptyRequest) (*FloatResponse, error)
	GetTotalIncome(context.Context, *EmptyRequest) (*FloatResponse, error)
	GetMonthlyIncome(context.Context, *EmptyRequest) (*FloatResponse, error)
	GetClinicAverageCheck(context.Context, *EmptyRequest) (*FloatResponse, error)
	GetDoctorByID(context.Context, *GetByIDRequest) (*GetDoctorResponse, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageServiceServer struct{}

func (UnimplementedStorageServiceServer) GetTotalPatients(context.Context, *EmptyRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalPatients not implemented")
}
func (UnimplementedStorageServiceServer) GetTotalVisits(context.Context, *EmptyRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalVisits not implemented")
}
func (UnimplementedStorageServiceServer) GetTopServices(context.Context, *EmptyRequest) (*ServiceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopServices not implemented")
}
func (UnimplementedStorageServiceServer) GetDoctorAvgVisit(context.Context, *EmptyRequest) (*DoctorAvgVisitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorAvgVisit not implemented")
}
func (UnimplementedStorageServiceServer) GetDoctorAvgCheck(context.Context, *EmptyRequest) (*DoctorAvgCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorAvgCheck not implemented")
}
func (UnimplementedStorageServiceServer) GetDoctorUniquePatient(context.Context, *EmptyRequest) (*DoctorUniquePatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorUniquePatient not implemented")
}
func (UnimplementedStorageServiceServer) GetAgeGroupStat(context.Context, *EmptyRequest) (*AgeGroupStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgeGroupStat not implemented")
}
func (UnimplementedStorageServiceServer) GetNewPatientsThisMonth(context.Context, *EmptyRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewPatientsThisMonth not implemented")
}
func (UnimplementedStorageServiceServer) GetAvgVisitsPerPatient(context.Context, *EmptyRequest) (*FloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvgVisitsPerPatient not implemented")
}
func (UnimplementedStorageServiceServer) GetTotalIncome(context.Context, *EmptyRequest) (*FloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalIncome not implemented")
}
func (UnimplementedStorageServiceServer) GetMonthlyIncome(context.Context, *EmptyRequest) (*FloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyIncome not implemented")
}
func (UnimplementedStorageServiceServer) GetClinicAverageCheck(context.Context, *EmptyRequest) (*FloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClinicAverageCheck not implemented")
}
func (UnimplementedStorageServiceServer) GetDoctorByID(context.Context, *GetByIDRequest) (*GetDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorByID not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}
func (UnimplementedStorageServiceServer) testEmbeddedByValue()                        {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_GetTotalPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetTotalPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetTotalPatients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetTotalPatients(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetTotalVisits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetTotalVisits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetTotalVisits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetTotalVisits(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetTopServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetTopServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetTopServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetTopServices(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetDoctorAvgVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetDoctorAvgVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetDoctorAvgVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetDoctorAvgVisit(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetDoctorAvgCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetDoctorAvgCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetDoctorAvgCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetDoctorAvgCheck(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetDoctorUniquePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetDoctorUniquePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetDoctorUniquePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetDoctorUniquePatient(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetAgeGroupStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetAgeGroupStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetAgeGroupStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetAgeGroupStat(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetNewPatientsThisMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetNewPatientsThisMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetNewPatientsThisMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetNewPatientsThisMonth(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetAvgVisitsPerPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetAvgVisitsPerPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetAvgVisitsPerPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetAvgVisitsPerPatient(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetTotalIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetTotalIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetTotalIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetTotalIncome(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetMonthlyIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetMonthlyIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetMonthlyIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetMonthlyIncome(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetClinicAverageCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetClinicAverageCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetClinicAverageCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetClinicAverageCheck(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetDoctorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetDoctorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetDoctorByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetDoctorByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalPatients",
			Handler:    _StorageService_GetTotalPatients_Handler,
		},
		{
			MethodName: "GetTotalVisits",
			Handler:    _StorageService_GetTotalVisits_Handler,
		},
		{
			MethodName: "GetTopServices",
			Handler:    _StorageService_GetTopServices_Handler,
		},
		{
			MethodName: "GetDoctorAvgVisit",
			Handler:    _StorageService_GetDoctorAvgVisit_Handler,
		},
		{
			MethodName: "GetDoctorAvgCheck",
			Handler:    _StorageService_GetDoctorAvgCheck_Handler,
		},
		{
			MethodName: "GetDoctorUniquePatient",
			Handler:    _StorageService_GetDoctorUniquePatient_Handler,
		},
		{
			MethodName: "GetAgeGroupStat",
			Handler:    _StorageService_GetAgeGroupStat_Handler,
		},
		{
			MethodName: "GetNewPatientsThisMonth",
			Handler:    _StorageService_GetNewPatientsThisMonth_Handler,
		},
		{
			MethodName: "GetAvgVisitsPerPatient",
			Handler:    _StorageService_GetAvgVisitsPerPatient_Handler,
		},
		{
			MethodName: "GetTotalIncome",
			Handler:    _StorageService_GetTotalIncome_Handler,
		},
		{
			MethodName: "GetMonthlyIncome",
			Handler:    _StorageService_GetMonthlyIncome_Handler,
		},
		{
			MethodName: "GetClinicAverageCheck",
			Handler:    _StorageService_GetClinicAverageCheck_Handler,
		},
		{
			MethodName: "GetDoctorByID",
			Handler:    _StorageService_GetDoctorByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/storage/storage.proto",
}
