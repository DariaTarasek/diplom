// proto файл admin-сервиса для генерации grpc-сервера

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/admin/admin.proto

package adminpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_UpdateClinicWeeklySchedule_FullMethodName   = "/admin.AdminService/UpdateClinicWeeklySchedule"
	AdminService_AddDoctorWeeklySchedule_FullMethodName      = "/admin.AdminService/AddDoctorWeeklySchedule"
	AdminService_UpdateDoctorWeeklySchedule_FullMethodName   = "/admin.AdminService/UpdateDoctorWeeklySchedule"
	AdminService_AddClinicDailyOverride_FullMethodName       = "/admin.AdminService/AddClinicDailyOverride"
	AdminService_AddDoctorDailyOverride_FullMethodName       = "/admin.AdminService/AddDoctorDailyOverride"
	AdminService_AddMaterial_FullMethodName                  = "/admin.AdminService/AddMaterial"
	AdminService_AddService_FullMethodName                   = "/admin.AdminService/AddService"
	AdminService_UpdateMaterial_FullMethodName               = "/admin.AdminService/UpdateMaterial"
	AdminService_UpdateService_FullMethodName                = "/admin.AdminService/UpdateService"
	AdminService_DeleteMaterial_FullMethodName               = "/admin.AdminService/DeleteMaterial"
	AdminService_DeleteService_FullMethodName                = "/admin.AdminService/DeleteService"
	AdminService_GetAdmins_FullMethodName                    = "/admin.AdminService/GetAdmins"
	AdminService_GetPatients_FullMethodName                  = "/admin.AdminService/GetPatients"
	AdminService_GetDoctors_FullMethodName                   = "/admin.AdminService/GetDoctors"
	AdminService_GetSpecs_FullMethodName                     = "/admin.AdminService/GetSpecs"
	AdminService_UpdateDoctor_FullMethodName                 = "/admin.AdminService/UpdateDoctor"
	AdminService_UpdateAdmin_FullMethodName                  = "/admin.AdminService/UpdateAdmin"
	AdminService_UpdatePatient_FullMethodName                = "/admin.AdminService/UpdatePatient"
	AdminService_DeleteUser_FullMethodName                   = "/admin.AdminService/DeleteUser"
	AdminService_UpdateEmployeeLogin_FullMethodName          = "/admin.AdminService/UpdateEmployeeLogin"
	AdminService_UpdatePatientLogin_FullMethodName           = "/admin.AdminService/UpdatePatientLogin"
	AdminService_GetUnconfirmedVisitPayments_FullMethodName  = "/admin.AdminService/GetUnconfirmedVisitPayments"
	AdminService_GetClinicScheduleGrid_FullMethodName        = "/admin.AdminService/GetClinicScheduleGrid"
	AdminService_UpdateVisitPayment_FullMethodName           = "/admin.AdminService/UpdateVisitPayment"
	AdminService_GetVisitMaterialsAndServices_FullMethodName = "/admin.AdminService/GetVisitMaterialsAndServices"
	AdminService_GetUnconfirmedAppointments_FullMethodName   = "/admin.AdminService/GetUnconfirmedAppointments"
	AdminService_UpdateAppointment_FullMethodName            = "/admin.AdminService/UpdateAppointment"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	UpdateClinicWeeklySchedule(ctx context.Context, in *UpdateClinicWeeklyScheduleRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddDoctorWeeklySchedule(ctx context.Context, in *AddDoctorWeeklyScheduleRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	UpdateDoctorWeeklySchedule(ctx context.Context, in *UpdateDoctorWeeklyScheduleRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddClinicDailyOverride(ctx context.Context, in *AddClinicDailyOverrideRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddDoctorDailyOverride(ctx context.Context, in *AddDoctorDailyOverrideRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddMaterial(ctx context.Context, in *AddMaterialRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddService(ctx context.Context, in *AddServiceRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	UpdateMaterial(ctx context.Context, in *UpdateMaterialRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	DeleteMaterial(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	DeleteService(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	GetAdmins(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAdminsResponse, error)
	GetPatients(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetPatientsResponse, error)
	GetDoctors(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetDoctorsResponse, error)
	GetSpecs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetSpecsResponse, error)
	UpdateDoctor(ctx context.Context, in *UpdateDoctorRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	UpdateAdmin(ctx context.Context, in *UpdateAdminRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	UpdatePatient(ctx context.Context, in *UpdatePatientRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	DeleteUser(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	UpdateEmployeeLogin(ctx context.Context, in *UpdateUserLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	UpdatePatientLogin(ctx context.Context, in *UpdateUserLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	GetUnconfirmedVisitPayments(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UnconfirmedVisitPaymentsResponse, error)
	GetClinicScheduleGrid(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminScheduleOverview, error)
	UpdateVisitPayment(ctx context.Context, in *UpdateVisitPaymentRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	GetVisitMaterialsAndServices(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetVisitMaterialsAndServicesResponse, error)
	GetUnconfirmedAppointments(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetUnconfirmedAppointmentResponse, error)
	UpdateAppointment(ctx context.Context, in *UpdateAppointmentRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) UpdateClinicWeeklySchedule(ctx context.Context, in *UpdateClinicWeeklyScheduleRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateClinicWeeklySchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddDoctorWeeklySchedule(ctx context.Context, in *AddDoctorWeeklyScheduleRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_AddDoctorWeeklySchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDoctorWeeklySchedule(ctx context.Context, in *UpdateDoctorWeeklyScheduleRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDoctorWeeklySchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddClinicDailyOverride(ctx context.Context, in *AddClinicDailyOverrideRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_AddClinicDailyOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddDoctorDailyOverride(ctx context.Context, in *AddDoctorDailyOverrideRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_AddDoctorDailyOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddMaterial(ctx context.Context, in *AddMaterialRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_AddMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddService(ctx context.Context, in *AddServiceRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_AddService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateMaterial(ctx context.Context, in *UpdateMaterialRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteMaterial(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteService(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAdmins(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAdminsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdminsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetAdmins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPatients(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetPatientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetPatients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDoctors(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetDoctorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoctorsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDoctors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSpecs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetSpecsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpecsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSpecs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDoctor(ctx context.Context, in *UpdateDoctorRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateAdmin(ctx context.Context, in *UpdateAdminRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePatient(ctx context.Context, in *UpdatePatientRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteUser(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateEmployeeLogin(ctx context.Context, in *UpdateUserLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateEmployeeLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePatientLogin(ctx context.Context, in *UpdateUserLoginRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdatePatientLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUnconfirmedVisitPayments(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UnconfirmedVisitPaymentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnconfirmedVisitPaymentsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetUnconfirmedVisitPayments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetClinicScheduleGrid(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminScheduleOverview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminScheduleOverview)
	err := c.cc.Invoke(ctx, AdminService_GetClinicScheduleGrid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateVisitPayment(ctx context.Context, in *UpdateVisitPaymentRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateVisitPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetVisitMaterialsAndServices(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetVisitMaterialsAndServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVisitMaterialsAndServicesResponse)
	err := c.cc.Invoke(ctx, AdminService_GetVisitMaterialsAndServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUnconfirmedAppointments(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetUnconfirmedAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnconfirmedAppointmentResponse)
	err := c.cc.Invoke(ctx, AdminService_GetUnconfirmedAppointments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateAppointment(ctx context.Context, in *UpdateAppointmentRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
type AdminServiceServer interface {
	UpdateClinicWeeklySchedule(context.Context, *UpdateClinicWeeklyScheduleRequest) (*DefaultResponse, error)
	AddDoctorWeeklySchedule(context.Context, *AddDoctorWeeklyScheduleRequest) (*DefaultResponse, error)
	UpdateDoctorWeeklySchedule(context.Context, *UpdateDoctorWeeklyScheduleRequest) (*DefaultResponse, error)
	AddClinicDailyOverride(context.Context, *AddClinicDailyOverrideRequest) (*DefaultResponse, error)
	AddDoctorDailyOverride(context.Context, *AddDoctorDailyOverrideRequest) (*DefaultResponse, error)
	AddMaterial(context.Context, *AddMaterialRequest) (*DefaultResponse, error)
	AddService(context.Context, *AddServiceRequest) (*DefaultResponse, error)
	UpdateMaterial(context.Context, *UpdateMaterialRequest) (*DefaultResponse, error)
	UpdateService(context.Context, *UpdateServiceRequest) (*DefaultResponse, error)
	DeleteMaterial(context.Context, *DeleteRequest) (*DefaultResponse, error)
	DeleteService(context.Context, *DeleteRequest) (*DefaultResponse, error)
	GetAdmins(context.Context, *EmptyRequest) (*GetAdminsResponse, error)
	GetPatients(context.Context, *EmptyRequest) (*GetPatientsResponse, error)
	GetDoctors(context.Context, *EmptyRequest) (*GetDoctorsResponse, error)
	GetSpecs(context.Context, *EmptyRequest) (*GetSpecsResponse, error)
	UpdateDoctor(context.Context, *UpdateDoctorRequest) (*DefaultResponse, error)
	UpdateAdmin(context.Context, *UpdateAdminRequest) (*DefaultResponse, error)
	UpdatePatient(context.Context, *UpdatePatientRequest) (*DefaultResponse, error)
	DeleteUser(context.Context, *DeleteRequest) (*DefaultResponse, error)
	UpdateEmployeeLogin(context.Context, *UpdateUserLoginRequest) (*DefaultResponse, error)
	UpdatePatientLogin(context.Context, *UpdateUserLoginRequest) (*DefaultResponse, error)
	GetUnconfirmedVisitPayments(context.Context, *EmptyRequest) (*UnconfirmedVisitPaymentsResponse, error)
	GetClinicScheduleGrid(context.Context, *EmptyRequest) (*AdminScheduleOverview, error)
	UpdateVisitPayment(context.Context, *UpdateVisitPaymentRequest) (*DefaultResponse, error)
	GetVisitMaterialsAndServices(context.Context, *GetByIdRequest) (*GetVisitMaterialsAndServicesResponse, error)
	GetUnconfirmedAppointments(context.Context, *EmptyRequest) (*GetUnconfirmedAppointmentResponse, error)
	UpdateAppointment(context.Context, *UpdateAppointmentRequest) (*DefaultResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) UpdateClinicWeeklySchedule(context.Context, *UpdateClinicWeeklyScheduleRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClinicWeeklySchedule not implemented")
}
func (UnimplementedAdminServiceServer) AddDoctorWeeklySchedule(context.Context, *AddDoctorWeeklyScheduleRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDoctorWeeklySchedule not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDoctorWeeklySchedule(context.Context, *UpdateDoctorWeeklyScheduleRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorWeeklySchedule not implemented")
}
func (UnimplementedAdminServiceServer) AddClinicDailyOverride(context.Context, *AddClinicDailyOverrideRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClinicDailyOverride not implemented")
}
func (UnimplementedAdminServiceServer) AddDoctorDailyOverride(context.Context, *AddDoctorDailyOverrideRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDoctorDailyOverride not implemented")
}
func (UnimplementedAdminServiceServer) AddMaterial(context.Context, *AddMaterialRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMaterial not implemented")
}
func (UnimplementedAdminServiceServer) AddService(context.Context, *AddServiceRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddService not implemented")
}
func (UnimplementedAdminServiceServer) UpdateMaterial(context.Context, *UpdateMaterialRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaterial not implemented")
}
func (UnimplementedAdminServiceServer) UpdateService(context.Context, *UpdateServiceRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedAdminServiceServer) DeleteMaterial(context.Context, *DeleteRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMaterial not implemented")
}
func (UnimplementedAdminServiceServer) DeleteService(context.Context, *DeleteRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedAdminServiceServer) GetAdmins(context.Context, *EmptyRequest) (*GetAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmins not implemented")
}
func (UnimplementedAdminServiceServer) GetPatients(context.Context, *EmptyRequest) (*GetPatientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatients not implemented")
}
func (UnimplementedAdminServiceServer) GetDoctors(context.Context, *EmptyRequest) (*GetDoctorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctors not implemented")
}
func (UnimplementedAdminServiceServer) GetSpecs(context.Context, *EmptyRequest) (*GetSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecs not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDoctor(context.Context, *UpdateDoctorRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctor not implemented")
}
func (UnimplementedAdminServiceServer) UpdateAdmin(context.Context, *UpdateAdminRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdmin not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePatient(context.Context, *UpdatePatientRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatient not implemented")
}
func (UnimplementedAdminServiceServer) DeleteUser(context.Context, *DeleteRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAdminServiceServer) UpdateEmployeeLogin(context.Context, *UpdateUserLoginRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployeeLogin not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePatientLogin(context.Context, *UpdateUserLoginRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatientLogin not implemented")
}
func (UnimplementedAdminServiceServer) GetUnconfirmedVisitPayments(context.Context, *EmptyRequest) (*UnconfirmedVisitPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnconfirmedVisitPayments not implemented")
}
func (UnimplementedAdminServiceServer) GetClinicScheduleGrid(context.Context, *EmptyRequest) (*AdminScheduleOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClinicScheduleGrid not implemented")
}
func (UnimplementedAdminServiceServer) UpdateVisitPayment(context.Context, *UpdateVisitPaymentRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVisitPayment not implemented")
}
func (UnimplementedAdminServiceServer) GetVisitMaterialsAndServices(context.Context, *GetByIdRequest) (*GetVisitMaterialsAndServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisitMaterialsAndServices not implemented")
}
func (UnimplementedAdminServiceServer) GetUnconfirmedAppointments(context.Context, *EmptyRequest) (*GetUnconfirmedAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnconfirmedAppointments not implemented")
}
func (UnimplementedAdminServiceServer) UpdateAppointment(context.Context, *UpdateAppointmentRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointment not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_UpdateClinicWeeklySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClinicWeeklyScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateClinicWeeklySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateClinicWeeklySchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateClinicWeeklySchedule(ctx, req.(*UpdateClinicWeeklyScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddDoctorWeeklySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDoctorWeeklyScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddDoctorWeeklySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddDoctorWeeklySchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddDoctorWeeklySchedule(ctx, req.(*AddDoctorWeeklyScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDoctorWeeklySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorWeeklyScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDoctorWeeklySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDoctorWeeklySchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDoctorWeeklySchedule(ctx, req.(*UpdateDoctorWeeklyScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddClinicDailyOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClinicDailyOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddClinicDailyOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddClinicDailyOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddClinicDailyOverride(ctx, req.(*AddClinicDailyOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddDoctorDailyOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDoctorDailyOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddDoctorDailyOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddDoctorDailyOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddDoctorDailyOverride(ctx, req.(*AddDoctorDailyOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddMaterial(ctx, req.(*AddMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddService(ctx, req.(*AddServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateMaterial(ctx, req.(*UpdateMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteMaterial(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteService(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAdmins(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPatients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPatients(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDoctors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDoctors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDoctors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDoctors(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSpecs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSpecs(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDoctor(ctx, req.(*UpdateDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateAdmin(ctx, req.(*UpdateAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePatient(ctx, req.(*UpdatePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteUser(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateEmployeeLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateEmployeeLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateEmployeeLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateEmployeeLogin(ctx, req.(*UpdateUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePatientLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePatientLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdatePatientLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePatientLogin(ctx, req.(*UpdateUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUnconfirmedVisitPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUnconfirmedVisitPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetUnconfirmedVisitPayments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUnconfirmedVisitPayments(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetClinicScheduleGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetClinicScheduleGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetClinicScheduleGrid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetClinicScheduleGrid(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateVisitPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVisitPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateVisitPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateVisitPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateVisitPayment(ctx, req.(*UpdateVisitPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetVisitMaterialsAndServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetVisitMaterialsAndServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetVisitMaterialsAndServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetVisitMaterialsAndServices(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUnconfirmedAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUnconfirmedAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetUnconfirmedAppointments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUnconfirmedAppointments(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateAppointment(ctx, req.(*UpdateAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateClinicWeeklySchedule",
			Handler:    _AdminService_UpdateClinicWeeklySchedule_Handler,
		},
		{
			MethodName: "AddDoctorWeeklySchedule",
			Handler:    _AdminService_AddDoctorWeeklySchedule_Handler,
		},
		{
			MethodName: "UpdateDoctorWeeklySchedule",
			Handler:    _AdminService_UpdateDoctorWeeklySchedule_Handler,
		},
		{
			MethodName: "AddClinicDailyOverride",
			Handler:    _AdminService_AddClinicDailyOverride_Handler,
		},
		{
			MethodName: "AddDoctorDailyOverride",
			Handler:    _AdminService_AddDoctorDailyOverride_Handler,
		},
		{
			MethodName: "AddMaterial",
			Handler:    _AdminService_AddMaterial_Handler,
		},
		{
			MethodName: "AddService",
			Handler:    _AdminService_AddService_Handler,
		},
		{
			MethodName: "UpdateMaterial",
			Handler:    _AdminService_UpdateMaterial_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _AdminService_UpdateService_Handler,
		},
		{
			MethodName: "DeleteMaterial",
			Handler:    _AdminService_DeleteMaterial_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _AdminService_DeleteService_Handler,
		},
		{
			MethodName: "GetAdmins",
			Handler:    _AdminService_GetAdmins_Handler,
		},
		{
			MethodName: "GetPatients",
			Handler:    _AdminService_GetPatients_Handler,
		},
		{
			MethodName: "GetDoctors",
			Handler:    _AdminService_GetDoctors_Handler,
		},
		{
			MethodName: "GetSpecs",
			Handler:    _AdminService_GetSpecs_Handler,
		},
		{
			MethodName: "UpdateDoctor",
			Handler:    _AdminService_UpdateDoctor_Handler,
		},
		{
			MethodName: "UpdateAdmin",
			Handler:    _AdminService_UpdateAdmin_Handler,
		},
		{
			MethodName: "UpdatePatient",
			Handler:    _AdminService_UpdatePatient_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AdminService_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateEmployeeLogin",
			Handler:    _AdminService_UpdateEmployeeLogin_Handler,
		},
		{
			MethodName: "UpdatePatientLogin",
			Handler:    _AdminService_UpdatePatientLogin_Handler,
		},
		{
			MethodName: "GetUnconfirmedVisitPayments",
			Handler:    _AdminService_GetUnconfirmedVisitPayments_Handler,
		},
		{
			MethodName: "GetClinicScheduleGrid",
			Handler:    _AdminService_GetClinicScheduleGrid_Handler,
		},
		{
			MethodName: "UpdateVisitPayment",
			Handler:    _AdminService_UpdateVisitPayment_Handler,
		},
		{
			MethodName: "GetVisitMaterialsAndServices",
			Handler:    _AdminService_GetVisitMaterialsAndServices_Handler,
		},
		{
			MethodName: "GetUnconfirmedAppointments",
			Handler:    _AdminService_GetUnconfirmedAppointments_Handler,
		},
		{
			MethodName: "UpdateAppointment",
			Handler:    _AdminService_UpdateAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/admin/admin.proto",
}
