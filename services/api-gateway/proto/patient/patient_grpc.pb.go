// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/patient/patient.proto

package patientpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PatientService_GetAppointmentSlots_FullMethodName     = "/patient.PatientService/GetAppointmentSlots"
	PatientService_AddAppointment_FullMethodName          = "/patient.PatientService/AddAppointment"
	PatientService_GetUpcomingAppointments_FullMethodName = "/patient.PatientService/GetUpcomingAppointments"
	PatientService_UpdateAppointment_FullMethodName       = "/patient.PatientService/UpdateAppointment"
	PatientService_CancelAppointment_FullMethodName       = "/patient.PatientService/CancelAppointment"
	PatientService_GetHistoryVisits_FullMethodName        = "/patient.PatientService/GetHistoryVisits"
)

// PatientServiceClient is the client API for PatientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatientServiceClient interface {
	GetAppointmentSlots(ctx context.Context, in *GetAppointmentSlotsRequest, opts ...grpc.CallOption) (*GetAppointmentSlotsResponse, error)
	AddAppointment(ctx context.Context, in *AddAppointmentRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	GetUpcomingAppointments(ctx context.Context, in *GetUpcomingAppointmentsRequest, opts ...grpc.CallOption) (*GetUpcomingAppointmentsResponse, error)
	UpdateAppointment(ctx context.Context, in *UpdateAppointmentRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	CancelAppointment(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	GetHistoryVisits(ctx context.Context, in *GetHistoryVisitsRequest, opts ...grpc.CallOption) (*GetHistoryVisitsResponse, error)
}

type patientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientServiceClient(cc grpc.ClientConnInterface) PatientServiceClient {
	return &patientServiceClient{cc}
}

func (c *patientServiceClient) GetAppointmentSlots(ctx context.Context, in *GetAppointmentSlotsRequest, opts ...grpc.CallOption) (*GetAppointmentSlotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppointmentSlotsResponse)
	err := c.cc.Invoke(ctx, PatientService_GetAppointmentSlots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) AddAppointment(ctx context.Context, in *AddAppointmentRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, PatientService_AddAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetUpcomingAppointments(ctx context.Context, in *GetUpcomingAppointmentsRequest, opts ...grpc.CallOption) (*GetUpcomingAppointmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUpcomingAppointmentsResponse)
	err := c.cc.Invoke(ctx, PatientService_GetUpcomingAppointments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) UpdateAppointment(ctx context.Context, in *UpdateAppointmentRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, PatientService_UpdateAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) CancelAppointment(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, PatientService_CancelAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetHistoryVisits(ctx context.Context, in *GetHistoryVisitsRequest, opts ...grpc.CallOption) (*GetHistoryVisitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryVisitsResponse)
	err := c.cc.Invoke(ctx, PatientService_GetHistoryVisits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientServiceServer is the server API for PatientService service.
// All implementations must embed UnimplementedPatientServiceServer
// for forward compatibility.
type PatientServiceServer interface {
	GetAppointmentSlots(context.Context, *GetAppointmentSlotsRequest) (*GetAppointmentSlotsResponse, error)
	AddAppointment(context.Context, *AddAppointmentRequest) (*DefaultResponse, error)
	GetUpcomingAppointments(context.Context, *GetUpcomingAppointmentsRequest) (*GetUpcomingAppointmentsResponse, error)
	UpdateAppointment(context.Context, *UpdateAppointmentRequest) (*DefaultResponse, error)
	CancelAppointment(context.Context, *GetByIDRequest) (*DefaultResponse, error)
	GetHistoryVisits(context.Context, *GetHistoryVisitsRequest) (*GetHistoryVisitsResponse, error)
	mustEmbedUnimplementedPatientServiceServer()
}

// UnimplementedPatientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPatientServiceServer struct{}

func (UnimplementedPatientServiceServer) GetAppointmentSlots(context.Context, *GetAppointmentSlotsRequest) (*GetAppointmentSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentSlots not implemented")
}
func (UnimplementedPatientServiceServer) AddAppointment(context.Context, *AddAppointmentRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppointment not implemented")
}
func (UnimplementedPatientServiceServer) GetUpcomingAppointments(context.Context, *GetUpcomingAppointmentsRequest) (*GetUpcomingAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingAppointments not implemented")
}
func (UnimplementedPatientServiceServer) UpdateAppointment(context.Context, *UpdateAppointmentRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointment not implemented")
}
func (UnimplementedPatientServiceServer) CancelAppointment(context.Context, *GetByIDRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAppointment not implemented")
}
func (UnimplementedPatientServiceServer) GetHistoryVisits(context.Context, *GetHistoryVisitsRequest) (*GetHistoryVisitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryVisits not implemented")
}
func (UnimplementedPatientServiceServer) mustEmbedUnimplementedPatientServiceServer() {}
func (UnimplementedPatientServiceServer) testEmbeddedByValue()                        {}

// UnsafePatientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientServiceServer will
// result in compilation errors.
type UnsafePatientServiceServer interface {
	mustEmbedUnimplementedPatientServiceServer()
}

func RegisterPatientServiceServer(s grpc.ServiceRegistrar, srv PatientServiceServer) {
	// If the following call pancis, it indicates UnimplementedPatientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PatientService_ServiceDesc, srv)
}

func _PatientService_GetAppointmentSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetAppointmentSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientService_GetAppointmentSlots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetAppointmentSlots(ctx, req.(*GetAppointmentSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_AddAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).AddAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientService_AddAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).AddAppointment(ctx, req.(*AddAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetUpcomingAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpcomingAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetUpcomingAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientService_GetUpcomingAppointments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetUpcomingAppointments(ctx, req.(*GetUpcomingAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_UpdateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).UpdateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientService_UpdateAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).UpdateAppointment(ctx, req.(*UpdateAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_CancelAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).CancelAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientService_CancelAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).CancelAppointment(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetHistoryVisits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryVisitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetHistoryVisits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientService_GetHistoryVisits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetHistoryVisits(ctx, req.(*GetHistoryVisitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PatientService_ServiceDesc is the grpc.ServiceDesc for PatientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PatientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "patient.PatientService",
	HandlerType: (*PatientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppointmentSlots",
			Handler:    _PatientService_GetAppointmentSlots_Handler,
		},
		{
			MethodName: "AddAppointment",
			Handler:    _PatientService_AddAppointment_Handler,
		},
		{
			MethodName: "GetUpcomingAppointments",
			Handler:    _PatientService_GetUpcomingAppointments_Handler,
		},
		{
			MethodName: "UpdateAppointment",
			Handler:    _PatientService_UpdateAppointment_Handler,
		},
		{
			MethodName: "CancelAppointment",
			Handler:    _PatientService_CancelAppointment_Handler,
		},
		{
			MethodName: "GetHistoryVisits",
			Handler:    _PatientService_GetHistoryVisits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/patient/patient.proto",
}
