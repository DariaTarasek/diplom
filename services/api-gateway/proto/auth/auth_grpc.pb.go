// proto файл auth-сервиса для генерации grpc-сервера

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/auth/auth.proto

package authpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_EmployeeRegister_FullMethodName         = "/auth.AuthService/EmployeeRegister"
	AuthService_PatientRegister_FullMethodName          = "/auth.AuthService/PatientRegister"
	AuthService_PatientRegisterInClinic_FullMethodName  = "/auth.AuthService/PatientRegisterInClinic"
	AuthService_EmployeePasswordRecovery_FullMethodName = "/auth.AuthService/EmployeePasswordRecovery"
	AuthService_PatientPasswordRecovery_FullMethodName  = "/auth.AuthService/PatientPasswordRecovery"
	AuthService_RequestCode_FullMethodName              = "/auth.AuthService/RequestCode"
	AuthService_VerifyCode_FullMethodName               = "/auth.AuthService/VerifyCode"
	AuthService_Auth_FullMethodName                     = "/auth.AuthService/Auth"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	EmployeeRegister(ctx context.Context, in *EmployeeRegisterRequest, opts ...grpc.CallOption) (*EmployeeRegisterResponse, error)
	PatientRegister(ctx context.Context, in *PatientRegisterRequest, opts ...grpc.CallOption) (*PatientRegisterResponse, error)
	PatientRegisterInClinic(ctx context.Context, in *PatientRegisterInClinicRequest, opts ...grpc.CallOption) (*PatientRegisterInClinicResponse, error)
	EmployeePasswordRecovery(ctx context.Context, in *EmployeePasswordRecoveryRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	PatientPasswordRecovery(ctx context.Context, in *PatientPasswordRecoveryRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	RequestCode(ctx context.Context, in *GenerateCodeRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) EmployeeRegister(ctx context.Context, in *EmployeeRegisterRequest, opts ...grpc.CallOption) (*EmployeeRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeRegisterResponse)
	err := c.cc.Invoke(ctx, AuthService_EmployeeRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) PatientRegister(ctx context.Context, in *PatientRegisterRequest, opts ...grpc.CallOption) (*PatientRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatientRegisterResponse)
	err := c.cc.Invoke(ctx, AuthService_PatientRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) PatientRegisterInClinic(ctx context.Context, in *PatientRegisterInClinicRequest, opts ...grpc.CallOption) (*PatientRegisterInClinicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatientRegisterInClinicResponse)
	err := c.cc.Invoke(ctx, AuthService_PatientRegisterInClinic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EmployeePasswordRecovery(ctx context.Context, in *EmployeePasswordRecoveryRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AuthService_EmployeePasswordRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) PatientPasswordRecovery(ctx context.Context, in *PatientPasswordRecoveryRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AuthService_PatientPasswordRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RequestCode(ctx context.Context, in *GenerateCodeRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AuthService_RequestCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthService_Auth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	EmployeeRegister(context.Context, *EmployeeRegisterRequest) (*EmployeeRegisterResponse, error)
	PatientRegister(context.Context, *PatientRegisterRequest) (*PatientRegisterResponse, error)
	PatientRegisterInClinic(context.Context, *PatientRegisterInClinicRequest) (*PatientRegisterInClinicResponse, error)
	EmployeePasswordRecovery(context.Context, *EmployeePasswordRecoveryRequest) (*DefaultResponse, error)
	PatientPasswordRecovery(context.Context, *PatientPasswordRecoveryRequest) (*DefaultResponse, error)
	RequestCode(context.Context, *GenerateCodeRequest) (*DefaultResponse, error)
	VerifyCode(context.Context, *VerifyCodeRequest) (*DefaultResponse, error)
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) EmployeeRegister(context.Context, *EmployeeRegisterRequest) (*EmployeeRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmployeeRegister not implemented")
}
func (UnimplementedAuthServiceServer) PatientRegister(context.Context, *PatientRegisterRequest) (*PatientRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatientRegister not implemented")
}
func (UnimplementedAuthServiceServer) PatientRegisterInClinic(context.Context, *PatientRegisterInClinicRequest) (*PatientRegisterInClinicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatientRegisterInClinic not implemented")
}
func (UnimplementedAuthServiceServer) EmployeePasswordRecovery(context.Context, *EmployeePasswordRecoveryRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmployeePasswordRecovery not implemented")
}
func (UnimplementedAuthServiceServer) PatientPasswordRecovery(context.Context, *PatientPasswordRecoveryRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatientPasswordRecovery not implemented")
}
func (UnimplementedAuthServiceServer) RequestCode(context.Context, *GenerateCodeRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCode not implemented")
}
func (UnimplementedAuthServiceServer) VerifyCode(context.Context, *VerifyCodeRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCode not implemented")
}
func (UnimplementedAuthServiceServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_EmployeeRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EmployeeRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EmployeeRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EmployeeRegister(ctx, req.(*EmployeeRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_PatientRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).PatientRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_PatientRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).PatientRegister(ctx, req.(*PatientRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_PatientRegisterInClinic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientRegisterInClinicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).PatientRegisterInClinic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_PatientRegisterInClinic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).PatientRegisterInClinic(ctx, req.(*PatientRegisterInClinicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EmployeePasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeePasswordRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EmployeePasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EmployeePasswordRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EmployeePasswordRecovery(ctx, req.(*EmployeePasswordRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_PatientPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientPasswordRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).PatientPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_PatientPasswordRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).PatientPasswordRecovery(ctx, req.(*PatientPasswordRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RequestCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RequestCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RequestCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RequestCode(ctx, req.(*GenerateCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyCode(ctx, req.(*VerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmployeeRegister",
			Handler:    _AuthService_EmployeeRegister_Handler,
		},
		{
			MethodName: "PatientRegister",
			Handler:    _AuthService_PatientRegister_Handler,
		},
		{
			MethodName: "PatientRegisterInClinic",
			Handler:    _AuthService_PatientRegisterInClinic_Handler,
		},
		{
			MethodName: "EmployeePasswordRecovery",
			Handler:    _AuthService_EmployeePasswordRecovery_Handler,
		},
		{
			MethodName: "PatientPasswordRecovery",
			Handler:    _AuthService_PatientPasswordRecovery_Handler,
		},
		{
			MethodName: "RequestCode",
			Handler:    _AuthService_RequestCode_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _AuthService_VerifyCode_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _AuthService_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth/auth.proto",
}
