const { createApp } = Vue;

createApp({
  data() {
    return {
      patient: {
        secondName: '',
        firstName: '',
        surname: ''
      },
      isPopoverVisible: false,
      activeTab: 'upcoming',
      tabs: [
        { id: 'upcoming', label: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏' },
        { id: 'history', label: '–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π' },
        { id: 'tests', label: '–ê–Ω–∞–ª–∏–∑—ã / –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è' }
      ],
      upcoming: [],
      history: [],
      tests: [],
      selectedAppt: null,
      appointmentSchedule: {},
      selectedTransferSlot: null,
      paginatedSchedule: [],
      maxSlots: 0,
      currentPage: 0,
      daysPerPage: 7,
      dicomDescription: '',
    };
  },

  computed: {
    fullName() {
      return [this.patient.firstName, this.patient.secondName]
        .filter(Boolean)
        .join(' ');
    }
  },
  mounted() {
    this.fetchPatientInfo();
    this.fetchUpcoming();
    this.fetchHistory();
    this.fetchTests();
    document.addEventListener('click', this.handleClickOutside);
  },

  beforeUnmount() {
    document.removeEventListener('click', this.handleClickOutside);
  },
  methods: {
    fetchPatientInfo() {
      fetch('/api/patient/me', { method: 'GET', credentials: 'include' })
          .then(res => res.json())
          .then(json => {
            this.patient.secondName = json.secondName;
            this.patient.firstName = json.firstName;
            this.patient.surname = json.surname;
          })
          .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ:', err));
    },
    fetchUpcoming() {
      fetch('/api/patient/upcoming', { method: 'GET', credentials: 'include' })
          .then(res => res.json())
          .then(json => {
            this.upcoming = json || [];
          })
          .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π:', err));
    },
    fetchHistory() {
      fetch('/api/patient/history', { method: 'GET', credentials: 'include' })
          .then(res => res.json())
          .then(json => {
            this.history = json || [];
          })
          .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π:', err));
    },
    fetchTests() {
      fetch('/api/patient/tests', { method: 'GET', credentials: 'include' })
          .then(res => res.json())
          .then(json => {
            this.tests = json || [];
          })
          .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤:', err));
    },
    togglePopover() {
      this.isPopoverVisible = !this.isPopoverVisible;
    },
    handleClickOutside(event) {
      const popover = document.getElementById('patient-profile');
      if (popover && !popover.contains(event.target)) {
        this.isPopoverVisible = false;
      }
    },
    openManageModal(item) {
      this.selectedAppt = item;
      const modal = new bootstrap.Modal(document.getElementById('manageAppointmentModal'));
      modal.show();
    },

    showTransferModal() {
      // –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–æ—Ç–æ–≤, –∑–∞–º–µ–Ω–∏ URL –∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥ —Å–µ–±—è
      fetch(`/api/appointment-doctor-schedule/${this.selectedAppt.doctorId}`, {
        method: 'GET',
        credentials: 'include'
      })
          .then(res => res.json())
          .then(json => {
            this.appointmentSchedule = json;
            this.prepareScheduleTable(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            const modal = new bootstrap.Modal(document.getElementById('transferAppointmentModal'));
            modal.show();
          })
          .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤:', err));
    },

    selectTransferSlot(date, time) {
      this.selectedTransferSlot = { date, time };
    },

    confirmTransfer() {
      const payload = {
        id: this.selectedAppt.id,
        date: this.selectedTransferSlot.date,
        time: this.selectedTransferSlot.time
      };

      fetch('/api/appointments/transfer', {
        method: 'PUT',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })
          .then(res => res.json())
          .then(() => {
            bootstrap.Modal.getInstance(document.getElementById('transferAppointmentModal')).hide();
            bootstrap.Modal.getInstance(document.getElementById('manageAppointmentModal')).hide();
            this.fetchUpcoming(); // –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
          })
          .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏:', err));
    },

    confirmCancelAppointment() {
      if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?')) return;

      fetch(`/api/appointments/cancel/${this.selectedAppt.id}`, {
        method: 'GET',
        credentials: 'include'
      })
          .then(() => {
            bootstrap.Modal.getInstance(document.getElementById('manageAppointmentModal')).hide();
            this.fetchUpcoming();
          })
          .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏:', err));
    },
    prepareScheduleTable() {
      if (!Array.isArray(this.appointmentSchedule)) {
        this.paginatedSchedule = [];
        this.maxSlots = 0;
        return;
      }

      const normalized = this.appointmentSchedule.map(day => ({
        label: day.label,
        slots: Array.isArray(day.slots) ? day.slots : [],
      }));

      // –ø–∞–≥–∏–Ω–∞—Ü–∏—è
      const start = this.currentPage * this.daysPerPage;
      const end = start + this.daysPerPage;
      this.paginatedSchedule = normalized.slice(start, end);

      this.maxSlots = Math.max(0, ...this.paginatedSchedule.map(day => day.slots.length));
    },
    nextPage() {
      const maxPage = Math.ceil(this.appointmentSchedule.length / this.daysPerPage) - 1;
      if (this.currentPage < maxPage) {
        this.currentPage++;
        this.prepareScheduleTable();
      }
    },
    prevPage() {
      if (this.currentPage > 0) {
        this.currentPage--;
        this.prepareScheduleTable();
      }
    },
    isSelectedSlot(date, time) {
      return this.selectedTransferSlot &&
          this.selectedTransferSlot.date === date &&
          this.selectedTransferSlot.time === time;
    },
    handleDICOMUpload(event) {
      const files = event.target.files;
      if (!files.length) return;

      const formData = new FormData();
      const file = files[0];
      if (!file) {
        console.error('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
        return;
      }

      formData.append('file', file); // –ø—Ä–∞–≤–∏–ª—å–Ω–æ: –∫–ª—é—á 'file' –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      formData.append('description', this.dicomDescription || '');

      // üîç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      for (let [key, value] of formData.entries()) {
        console.log(`${key}:`, value);
      }

      fetch('/api/patient/tests/upload', {
        method: 'POST',
        credentials: 'include',
        body: formData // –ù–ï –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ô Content-Type!
      })
          .then(res => res.json())
          .then(() => {
            this.fetchTests();
          })
          .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DICOM-—Ñ–∞–π–ª–∞:', err);
          });
    }

  }
}).mount('#app');
