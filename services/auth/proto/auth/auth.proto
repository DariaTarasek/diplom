// proto файл auth-сервиса для генерации grpc-сервера

syntax = "proto3";

package auth;

import "google/protobuf/timestamp.proto";

option go_package = "auth/proto;authpb";

message UserData {
  string login = 1;
  string password = 2;
}

message EmployeeRegisterResponse {
  int32 user_id = 1;
  string error = 2;
}

message EmployeeData {
  string first_name = 1;
  string second_name = 2;
  string surname = 3;
  string phone_number = 4;
  string email = 5;
  string gender = 6;
  int32 role = 7;
  string education = 8;
  int32 experience = 9;
}

message EmployeeRegisterRequest {
  UserData user = 1;
  EmployeeData employee = 2;
}

message PatientData {
  int32 user_id = 1;
  string first_name = 2;
  string second_name = 3;
  string surname = 4;
  string email = 5;
  google.protobuf.Timestamp birth_date = 6;
  string phone_number = 7;
  string gender = 8;
}

message PatientRegisterRequest {
  UserData user = 1;
  PatientData patient = 2;
}

message PatientRegisterResponse {
  int32 user_id = 1;
  string error = 2;
}

message PatientRegisterInClinicRequest {
  UserData user = 1;
  PatientData patient = 2;
}

message PatientRegisterInClinicResponse {
  int32 user_id = 1;
  string error = 2;
}

message EmployeePasswordRecoveryRequest {
  string login = 1;
}

message PatientPasswordRecoveryRequest {
  string login = 1;
}
message DefaultResponse {
  string error = 1;
}

message GenerateCodeRequest {
  string phone = 1;
}

message VerifyCodeRequest {
  string phone = 1;
  string code = 2;
}

message AuthRequest {
  string login = 1;
  string password = 2;
}

message AuthResponse {
  string token = 1;
  string role = 2;
}

service AuthService {
  rpc EmployeeRegister(EmployeeRegisterRequest) returns (EmployeeRegisterResponse); // регистрация персонала
  rpc PatientRegister(PatientRegisterRequest) returns (PatientRegisterResponse); // регистрация пациента онлайн
  rpc PatientRegisterInClinic(PatientRegisterInClinicRequest) returns (PatientRegisterInClinicResponse); // регистрация пациента в клинике
  rpc EmployeePasswordRecovery(EmployeePasswordRecoveryRequest) returns (DefaultResponse); // восстановление пароля сотрудника
  rpc PatientPasswordRecovery(PatientPasswordRecoveryRequest) returns (DefaultResponse); // восстановление пароля пациента
  rpc RequestCode(GenerateCodeRequest) returns (DefaultResponse); // запрос кода подтверждения
  rpc VerifyCode(VerifyCodeRequest) returns (DefaultResponse); // подтверждение кода
  rpc Auth(AuthRequest) returns (AuthResponse); // авторизация
}
